/* Generated By:JavaCC: Do not edit this line. SocialProtocolParser.java */
package tr.edu.boun.cmpe.mas.akin.hammurabi.protocol.parser;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import tr.edu.boun.cmpe.mas.akin.hammurabi.property.parser.BinaryExpressionToken;
import tr.edu.boun.cmpe.mas.akin.hammurabi.property.parser.CompoundPropertyToken;
import tr.edu.boun.cmpe.mas.akin.hammurabi.property.parser.PropertyToken;
import tr.edu.boun.cmpe.mas.akin.hammurabi.property.parser.PropertyExpressionToken;
import tr.edu.boun.cmpe.mas.akin.hammurabi.protocol.parser.NormToken;

public class SocialProtocolParser implements SocialProtocolParserConstants {

    private static boolean initialized;

    static {
        initialized = false;
    }

    public static Set<NormToken> parse(InputStream inputStream) throws ParseException {
        if (!initialized) {
            new SocialProtocolParser(inputStream);
            initialized = true;
        } else {
            ReInit(inputStream);
        }
        return protocol();
    }

  static final public Set<NormToken> protocol() throws ParseException {
    Set<NormToken> normTokens = new HashSet();
    NormToken normToken;
    jj_consume_token(PROTOCOL);
    jj_consume_token(LBRACE);
    label_1:
    while (true) {
      normToken = norm();
                          normTokens.add(normToken);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMIT:
      case PROHIBIT:
      case AUTHORIZE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(RBRACE);
    jj_consume_token(0);
     {if (true) return normTokens;}
    throw new Error("Missing return statement in function");
  }

  static final public NormToken norm() throws ParseException {
    NormToken norm;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMIT:
      norm = commit();
      break;
    case PROHIBIT:
      norm = prohibit();
      break;
    case AUTHORIZE:
      norm = authorize();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                  {if (true) return norm;}
    throw new Error("Missing return statement in function");
  }

  static final public NormToken commit() throws ParseException {
    NormToken norm;
    String debtor;
    String creditor;
    CompoundPropertyToken antecedent;
    CompoundPropertyToken consequent;
    CompoundPropertyToken compoundProperty;
    Token localToken;
    jj_consume_token(COMMIT);
    jj_consume_token(LPARAN);
    localToken = jj_consume_token(LABEL);
                          debtor = localToken.image;
    jj_consume_token(COMMA);
    localToken = jj_consume_token(LABEL);
                          creditor = localToken.image;
    jj_consume_token(COMMA);
    compoundProperty = compoundProperty();
                                           antecedent = compoundProperty;
    jj_consume_token(COMMA);
    compoundProperty = compoundProperty();
                                           consequent = compoundProperty;
    jj_consume_token(RPARAN);
     {if (true) return new NormToken(NormToken.COMMITMENT, debtor, creditor, antecedent, consequent);}
    throw new Error("Missing return statement in function");
  }

  static final public NormToken prohibit() throws ParseException {
    NormToken norm;
    String debtor;
    String creditor;
    CompoundPropertyToken antecedent;
    CompoundPropertyToken consequent;
    CompoundPropertyToken compoundProperty;
    Token localToken;
    jj_consume_token(PROHIBIT);
    jj_consume_token(LPARAN);
    localToken = jj_consume_token(LABEL);
                          debtor = localToken.image;
    jj_consume_token(COMMA);
    localToken = jj_consume_token(LABEL);
                          creditor = localToken.image;
    jj_consume_token(COMMA);
    compoundProperty = compoundProperty();
                                           antecedent = compoundProperty;
    jj_consume_token(COMMA);
    compoundProperty = compoundProperty();
                                           consequent = compoundProperty;
    jj_consume_token(RPARAN);
     {if (true) return new NormToken(NormToken.PROHIBITION, debtor, creditor, antecedent, consequent);}
    throw new Error("Missing return statement in function");
  }

  static final public NormToken authorize() throws ParseException {
    NormToken norm;
    String debtor;
    String creditor;
    CompoundPropertyToken antecedent;
    CompoundPropertyToken consequent;
    CompoundPropertyToken compoundProperty;
    Token localToken;
    jj_consume_token(AUTHORIZE);
    jj_consume_token(LPARAN);
    localToken = jj_consume_token(LABEL);
                          debtor = localToken.image;
    jj_consume_token(COMMA);
    localToken = jj_consume_token(LABEL);
                          creditor = localToken.image;
    jj_consume_token(COMMA);
    compoundProperty = compoundProperty();
                                           antecedent = compoundProperty;
    jj_consume_token(COMMA);
    compoundProperty = compoundProperty();
                                           consequent = compoundProperty;
    jj_consume_token(RPARAN);
     {if (true) return new NormToken(NormToken.AUTHORIZATION, debtor, creditor, antecedent, consequent);}
    throw new Error("Missing return statement in function");
  }

  static final public CompoundPropertyToken compoundProperty() throws ParseException {
    PropertyExpressionToken expression;
    expression = expression();
                               {if (true) return new CompoundPropertyToken(expression);}
    throw new Error("Missing return statement in function");
  }

  static final public PropertyExpressionToken expression() throws ParseException {
    PropertyExpressionToken expressionToken;
    expressionToken = orExpression();
                                      {if (true) return expressionToken;}
    throw new Error("Missing return statement in function");
  }

  static final public PropertyExpressionToken orExpression() throws ParseException {
    PropertyExpressionToken expressionToken;
    List<PropertyExpressionToken> expressionTokens = new ArrayList();
    expressionToken = andExpression();
                                       expressionTokens.add(expressionToken);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(LOR);
      expressionToken = andExpression();
                                             expressionTokens.add(expressionToken);
    }
        if (expressionTokens.size() == 1) {
            {if (true) return expressionToken;}
        } else {
            int index = expressionTokens.size() - 1;
            PropertyExpressionToken previousToken = new BinaryExpressionToken(BinaryExpressionToken.OR, expressionTokens.get(index - 1), expressionTokens.get(index));
            PropertyExpressionToken currentToken = null;
            for (index = index - 2 ; 0 <= index ; index--) {
                currentToken = new BinaryExpressionToken(BinaryExpressionToken.OR, expressionTokens.get(index), previousToken);
                previousToken = currentToken;
            }
            {if (true) return previousToken;}
        }
    throw new Error("Missing return statement in function");
  }

  static final public PropertyExpressionToken andExpression() throws ParseException {
    PropertyExpressionToken expressionToken;
    List<PropertyExpressionToken> expressionTokens = new ArrayList();
    expressionToken = unaryExpression();
                                         expressionTokens.add(expressionToken);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAND:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(LAND);
      expressionToken = unaryExpression();
                                               expressionTokens.add(expressionToken);
    }
        if (expressionTokens.size() == 1) {
            {if (true) return expressionToken;}
        } else {
            int index = expressionTokens.size() - 1;
            PropertyExpressionToken previousToken = new BinaryExpressionToken(BinaryExpressionToken.AND, expressionTokens.get(index - 1), expressionTokens.get(index));
            PropertyExpressionToken currentToken = null;
            for (index = index - 2 ; 0 <= index ; index--) {
                currentToken = new BinaryExpressionToken(BinaryExpressionToken.AND, expressionTokens.get(index), previousToken);
                previousToken = currentToken;
            }
            {if (true) return previousToken;}
        }
    throw new Error("Missing return statement in function");
  }

  static final public PropertyExpressionToken unaryExpression() throws ParseException {
    PropertyExpressionToken expressionToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARAN:
      jj_consume_token(LPARAN);
      expressionToken = expression();
      jj_consume_token(RPARAN);
      break;
    case APROP:
    case MPROP:
      expressionToken = property();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return expressionToken;}
    throw new Error("Missing return statement in function");
  }

  static final public PropertyExpressionToken property() throws ParseException {
    String type;
    List<String> eventLabels = new ArrayList();
    long intervalStart;
    long intervalEnd;
    Token localToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APROP:
      jj_consume_token(APROP);
                 type = PropertyToken.ACHIEVEMENT;
      jj_consume_token(LPARAN);
      localToken = jj_consume_token(LABEL);
                              eventLabels.add(localToken.image);
      break;
    case MPROP:
      jj_consume_token(MPROP);
                 type = PropertyToken.MAINTENANCE;
      jj_consume_token(LPARAN);
      localToken = jj_consume_token(LABEL);
                              eventLabels.add(localToken.image);
      jj_consume_token(COMMA);
      localToken = jj_consume_token(LABEL);
                              eventLabels.add(localToken.image);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPARAN);
    jj_consume_token(LSQBRA);
    localToken = jj_consume_token(NUMBER);
                           intervalStart = Long.parseLong(localToken.image);
    jj_consume_token(COMMA);
    localToken = jj_consume_token(NUMBER);
                           intervalEnd = Long.parseLong(localToken.image);
    jj_consume_token(RSQBRA);
     {if (true) return new PropertyToken(type, eventLabels, intervalStart, intervalEnd);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SocialProtocolParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c0,0x1c0,0x800,0x1000,0x2600,0x600,};
   }

  /** Constructor with InputStream. */
  public SocialProtocolParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SocialProtocolParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SocialProtocolParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SocialProtocolParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SocialProtocolParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SocialProtocolParser(SocialProtocolParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SocialProtocolParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
